import api from "./axios";

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
export async function getProducts() {
  try {
    const response = await api.get("/products");

    if (Array.isArray(response.data)) {
      return response.data;
    } else {
      console.error("‚ùå –û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤, –∞ –ø–æ–ª—É—á–µ–Ω–æ:", response.data);
      return [];
    }
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error?.message ?? error);
    if (error?.request) {
      console.debug("üîç –ó–∞–ø—Ä–æ—Å:", error.request);
    }
    return [];
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
export async function createProduct(data: {
  title: string;
  description: string;
  retail_price: number;
  opt_price: number;
  quantity: number;
}) {
  try {
    const response = await api.post("/products", data);
    return response.data;
  } catch (error: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:", error?.message ?? error);
    throw error;
  }
}
