from pydantic import BaseModel, ConfigDict
from typing import Optional, List


# ---------- –ê—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞ ----------

class ProductAttributeInput(BaseModel):
    attribute_id: int
    value: str


class ProductAttributeRead(BaseModel):
    id: int
    attribute_id: int
    value: str
    name: str  # –∏–º—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (join —Å Definition)
    unit: Optional[str] = None

    model_config = ConfigDict(from_attributes=True)


# ---------- –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ç–æ–≤–∞—Ä–∞ ----------

class ProductBase(BaseModel):
    title: str
    sku: str
    description: Optional[str] = None


class ProductBaseExtended(ProductBase):
    retail_price: Optional[int] = None
    opt_price: Optional[int] = None
    quantity: Optional[int] = None
    category_id: Optional[int] = None


# ---------- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ----------

class ProductCreate(ProductBaseExtended):
    attributes: Optional[List[ProductAttributeInput]] = []  # üü¢ –°–¥–µ–ª–∞–ª–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º


class ProductUpdate(ProductBaseExtended):
    title: Optional[str] = None
    sku: Optional[str] = None
    attributes: Optional[List[ProductAttributeInput]] = None

    model_config = ConfigDict(json_schema_extra={"example": {}})


# ---------- –û—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ----------

class ProductReadBase(ProductBase):
    id: int
    retail_price: Optional[int]
    quantity: Optional[int]
    category_id: Optional[int]
    attributes: List[ProductAttributeRead] = []  # üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    model_config = ConfigDict(from_attributes=True)


class ProductReadUser(ProductReadBase):
    pass


class ProductReadSuperuser(ProductReadBase):
    opt_price: Optional[int] = None

    model_config = ConfigDict(from_attributes=True)
