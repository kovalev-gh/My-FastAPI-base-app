from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy import ForeignKey, String, Table, Column, Integer
from core.models.base import Base


# üîó –°–≤—è–∑—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: –∞—Ç—Ä–∏–±—É—Ç—ã ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
attribute_category_link = Table(
    "attribute_category_link",
    Base.metadata,
    Column("attribute_id", ForeignKey("product_attribute_definitions.id", ondelete="CASCADE"), primary_key=True),
    Column("category_id", ForeignKey("categories.id", ondelete="CASCADE"), primary_key=True),
)


class ProductAttributeDefinition(Base):
    __tablename__ = "product_attribute_definitions"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String, nullable=False)  # –ù–∞–ø—Ä–∏–º–µ—Ä: "–î–∏–∞–≥–æ–Ω–∞–ª—å"
    unit: Mapped[str | None] = mapped_column(String, nullable=True)  # –ù–∞–ø—Ä–∏–º–µ—Ä: "–¥—é–π–º—ã"

    # üîÑ —Å–≤—è–∑—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º)
    categories: Mapped[list["Category"]] = relationship(
        secondary=attribute_category_link,
        back_populates="attributes"
    )


class ProductAttributeValue(Base):
    __tablename__ = "product_attribute_values"

    id: Mapped[int] = mapped_column(primary_key=True)

    product_id: Mapped[int] = mapped_column(ForeignKey("products.id", ondelete="CASCADE"))
    attribute_id: Mapped[int] = mapped_column(ForeignKey("product_attribute_definitions.id", ondelete="CASCADE"))

    value: Mapped[str] = mapped_column(String, nullable=False)

    # üîÅ —Å–≤—è–∑—å —Å —Ç–æ–≤–∞—Ä–æ–º –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    product: Mapped["Product"] = relationship(back_populates="attributes")
    attribute: Mapped["ProductAttributeDefinition"] = relationship()
