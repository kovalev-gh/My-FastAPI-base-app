мне нравится. измени этот код так, чтобы он отрисовывал такую форму import { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
  createProduct,
  updateProduct,
  deleteProduct,
  getProductById,
  getProductImages,
  uploadProductImage,
  deleteImage,
  setMainImage as setMainImageApi,
} from "../api/products";
import { getCategories } from "../api/categories";

export default function ProductForm() {
  const { productId } = useParams();
  const navigate = useNavigate();

  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [retailPrice, setRetailPrice] = useState("0");
  const [optPrice, setOptPrice] = useState("0");
  const [quantity, setQuantity] = useState("0");
  const [subfolder, setSubfolder] = useState("");
  const [categoryId, setCategoryId] = useState(null);
  const [categories, setCategories] = useState([]);
  const [files, setFiles] = useState([]);
  const [filePreviews, setFilePreviews] = useState([]);
  const [mainImageIndex, setMainImageIndex] = useState(null);
  const [message, setMessage] = useState("");
  const [existingImages, setExistingImages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [attributes, setAttributes] = useState([{ key: "", value: "" }]);

  useEffect(() => {
    getCategories().then((response) => {
      setCategories(response.data || []);
    }).catch((err) => {
      console.error("❌ Ошибка при загрузке категорий:", err);
      setMessage("❌ Не удалось загрузить категории.");
    });
  }, []);

  useEffect(() => {
    const fetchProductData = async () => {
      if (!productId) return;

      try {
        setLoading(true);
        const response = await getProductById(productId);
        const data = response.data;
        setTitle(data.title ?? "");
        setDescription(data.description ?? "");
        setRetailPrice(data.retail_price?.toString() ?? "0");
        setOptPrice(data.opt_price?.toString() ?? "0");
        setQuantity(data.quantity?.toString() ?? "0");
        setSubfolder("");
        setCategoryId(data.category_id ?? null);

        if (data.attributes && typeof data.attributes === "object") {
          const attrArray = Object.entries(data.attributes).map(([key, value]) => ({
            key,
            value: String(value)
          }));
          setAttributes(attrArray.length > 0 ? attrArray : [{ key: "", value: "" }]);
        }

        const imagesResponse = await getProductImages(productId);
        const images = imagesResponse.data || [];
        setExistingImages(images);
        const mainIndex = images.findIndex((img) => img.is_main);
        setMainImageIndex(mainIndex >= 0 ? mainIndex : null);
      } catch (err) {
        console.error("❌ Ошибка при загрузке товара:", err);
        setMessage("❌ Не удалось загрузить товар.");
      } finally {
        setLoading(false);
      }
    };

    fetchProductData();
  }, [productId]);

  const handleFileChange = (e) => {
    const selectedFiles = Array.from(e.target.files ?? []);
    setFiles(selectedFiles);
    setFilePreviews(selectedFiles.map((file) => URL.createObjectURL(file)));
    setMainImageIndex(0);
  };

  const normalizeNumberInput = (value) => {
    return value.replace(/^0+(?!$)/, "").replace(/\D/g, "") || "0";
  };

  const getAbsoluteImageUrl = (url) => {
    if (url.startsWith("http")) return url;
    return `/media/${url.replace(/^\/+/, "")}`;
  };

  const handleAttributeChange = (index, field, value) => {
    const newAttributes = [...attributes];
    newAttributes[index][field] = value;
    setAttributes(newAttributes);
  };

  const addAttribute = () => {
    setAttributes([...attributes, { key: "", value: "" }]);
  };

  const removeAttribute = (index) => {
    if (attributes.length === 1) return;
    setAttributes(attributes.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setMessage("");

    if (!categoryId) {
      setMessage("❌ Выберите категорию!");
      return;
    }

    const attributesObj = attributes.reduce((acc, attr) => {
      if (attr.key && attr.value) {
        acc[attr.key] = attr.value;
      }
      return acc;
    }, {});

    try {
      let productResponse;
      const productData = {
        title,
        description,
        retail_price: parseInt(retailPrice, 10),
        opt_price: parseInt(optPrice, 10),
        quantity: parseInt(quantity, 10),
        category_id: categoryId,
        attributes: attributesObj
      };

      if (productId) {
        productResponse = await updateProduct(productId, productData);
      } else {
        productResponse = await createProduct(productData);
      }

      const product = productResponse.data;

      if (files.length > 0 && subfolder) {
        const uploadedImageIds = [];

        for (const file of files) {
          const result = await uploadProductImage(productId || product.id, file, subfolder);
          uploadedImageIds.push(result.data.image_id);
        }

        if (mainImageIndex !== null && uploadedImageIds[mainImageIndex]) {
          await setMainImageApi(uploadedImageIds[mainImageIndex]);
        }
      }

      setMessage("✅ Изменения успешно сохранены!");
      if (!productId) {
        setTitle("");
        setDescription("");
        setRetailPrice("0");
        setOptPrice("0");
        setQuantity("0");
        setSubfolder("");
        setFiles([]);
        setFilePreviews([]);
        setMainImageIndex(null);
        setCategoryId(null);
        setAttributes([{ key: "", value: "" }]);
      }
    } catch (error) {
      console.error("❌ Ошибка при сохранении:", error);
      setMessage(`❌ Ошибка: ${error.response?.data?.detail || "Не удалось сохранить товар"}`);
    }
  };

  const handleDeleteImage = async (imageId) => {
    try {
      await deleteImage(imageId);
      setExistingImages((prev) => prev.filter((img) => img.id !== imageId));
      setMessage("✅ Изображение удалено!");
    } catch (error) {
      console.error("❌ Ошибка при удалении изображения:", error);
      setMessage("❌ Не удалось удалить изображение.");
    }
  };

  const handleSetMainImage = async (imageId) => {
    try {
      await setMainImageApi(imageId);
      const updatedImages = existingImages.map((img) => ({
        ...img,
        is_main: img.id === imageId,
      }));
      setExistingImages(updatedImages);
      setMessage("✅ Главное изображение установлено!");
    } catch (error) {
      console.error("❌ Ошибка при установке главного изображения:", error);
      setMessage("❌ Не удалось установить главное изображение.");
    }
  };

  const handleDeleteProduct = async () => {
    if (!productId) return;
    const confirmed = window.confirm("Вы уверены, что хотите удалить этот товар?");
    if (!confirmed) return;

    try {
      await deleteProduct(productId);
      setMessage("✅ Товар успешно удалён!");
      navigate("/products");
    } catch (error) {
      console.error("❌ Ошибка при удалении товара:", error);
      setMessage("❌ Не удалось удалить товар.");
    }
  };

  if (loading) return <p className="p-8">Загрузка товара...</p>;

  return (
    <div className="p-8 max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-6">
        {productId ? "Редактировать продукт" : "Добавить продукт"}
      </h2>
      <div className="bg-white shadow-md rounded-lg p-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Название:</label>
              <input
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                required
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Описание:</label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={4}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Розничная цена:</label>
              <input
                type="text"
                inputMode="numeric"
                pattern="[0-9]*"
                value={retailPrice}
                onChange={(e) => setRetailPrice(normalizeNumberInput(e.target.value))}
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Оптовая цена:</label>
              <input
                type="text"
                inputMode="numeric"
                pattern="[0-9]*"
                value={optPrice}
                onChange={(e) => setOptPrice(normalizeNumberInput(e.target.value))}
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Количество:</label>
              <input
                type="text"
                inputMode="numeric"
                pattern="[0-9]*"
                value={quantity}
                onChange={(e) => setQuantity(normalizeNumberInput(e.target.value))}
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Категория:</label>
              <select
                value={categoryId ?? ""}
                onChange={(e) => setCategoryId(Number(e.target.value))}
                required
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="" disabled>-- выберите категорию --</option>
                {categories.map((cat) => (
                  <option key={cat.id} value={cat.id}>{cat.name}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Дополнительные характеристики:</label>
              {attributes.map((attr, index) => (
                <div key={index} className="flex gap-2 items-center mb-2">
                  <input
                    value={attr.key}
                    onChange={(e) => handleAttributeChange(index, "key", e.target.value)}
                    placeholder="Название (например, Вес)"
                    className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <input
                    value={attr.value}
                    onChange={(e) => handleAttributeChange(index, "value", e.target.value)}
                    placeholder="Значение (например, 500 г)"
                    className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  <button
                    type="button"
                    onClick={() => removeAttribute(index)}
                    disabled={attributes.length === 1}
                    className="px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 disabled:bg-gray-300"
                  >
                    Удалить
                  </button>
                </div>
              ))}
              <button
                type="button"
                onClick={addAttribute}
                className="mt-2 px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600"
              >
                Добавить характеристику
              </button>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Путь к подпапке:</label>
              <input
                value={subfolder}
                onChange={(e) => setSubfolder(e.target.value)}
                placeholder="например, phones/iphone5"
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Новые изображения:</label>
              <input
                type="file"
                accept="image/*"
                multiple
                onChange={handleFileChange}
                className="w-full max-w-lg p-2 border border-gray-300 rounded-md"
              />
            </div>
          </div>

          {filePreviews.length > 0 && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Выберите главное изображение:</label>
              <div className="flex gap-4 flex-wrap mt-2">
                {filePreviews.map((preview, index) => (
                  <div key={index} className="text-center">
                    <img
                      src={preview}
                      alt={`preview-${index}`}
                      width={100}
                      height={100}
                      className={`object-cover rounded-lg border-2 ${mainImageIndex === index ? "border-green-500" : "border-gray-300"}`}
                    />
                    <input
                      type="radio"
                      name="mainImage"
                      checked={mainImageIndex === index}
                      onChange={() => setMainImageIndex(index)}
                      className="mt-2"
                    />
                    <div className="text-xs text-gray-600 mt-1">{files[index]?.name}</div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {existingImages.length > 0 && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Текущие изображения:</label>
              <div className="flex gap-4 flex-wrap mt-2">
                {existingImages.map((img, index) => (
                  <div key={img.id} className="text-center">
                    <img
                      src={getAbsoluteImageUrl(img.image_path)}
                      alt={`img-${index}`}
                      width={100}
                      height={100}
                      className={`object-cover rounded-lg border-2 ${img.is_main ? "border-green-500" : "border-gray-300"}`}
                    />
                    <button
                      type="button"
                      onClick={() => handleSetMainImage(img.id)}
                      className="mt-2 px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 text-sm"
                    >
                      Сделать главным
                    </button>
                    <button
                      type="button"
                      onClick={() => handleDeleteImage(img.id)}
                      className="mt-1 px-2 py-1 bg-red-500 text-white rounded hover:bg-red-600 text-sm"
                    >
                      Удалить
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="mt-6 flex gap-4">
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              {productId ? "Сохранить изменения" : "Создать"}
            </button>
            {productId && (
              <button
                type="button"
                onClick={handleDeleteProduct}
                className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
              >
                Удалить товар
              </button>
            )}
          </div>
        </form>

        {message && <p className="mt-4 text-lg text-gray-700">{message}</p>}
      </div>
    </div>
  );
}